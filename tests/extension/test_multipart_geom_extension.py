from typing import List
from unittest import TestCase

from shapely.geometry import box, MultiLineString, GeometryCollection, MultiPolygon, LineString, Polygon
from shapely.wkt import loads as wkt_loads


class MultiPartGeomExtensionTest(TestCase):
    def test_polygonize_multilinestring(self):
        case1 = wkt_loads(
            "MULTILINESTRING ((-30 330, 130 320), (130 320, 140 170), (140 170, 20 100), (20 100, -190 120), (-190 120, -180 210), (-170 210, -150 280), (-30 330, -150 280), (-170 210, -180 210))")
        self.assertEqual(1, len(case1.ext.polygonize().do()))

        case2 = wkt_loads(
            "MULTILINESTRING ((-127 209, -81 208), (-81 208, -98 188), (-98 188, -84 167), (-84 167, -127 167), (-127 167, -108 188), (-127 209, -108 188))")
        self.assertEqual(1, len(case2.ext.polygonize().do()))

        case3 = wkt_loads(
            "MULTILINESTRING ((-149 212, -162 199, -158 187, -139 193, -150 196, -144 205, -134 210, -144 216, -149 212), (-122 212, -123 194, -107 193, -108 213, -118 205, -120 212, -121.8 212))")
        self.assertEqual(2, len(case3.ext.polygonize().do()))

        case4 = wkt_loads(
            "MULTILINESTRING ((-360 260, -305.6666666666667 260), (-305.6666666666667 260, -295 218), (-295 218, -340.6666666666667 193.66666666666666), (-340.6666666666667 193.66666666666666, -360 260))")
        self.assertEqual(1, len(case4.ext.polygonize().do()))

        case5 = wkt_loads(
            "MULTILINESTRING ((650 430, 633 431, 622 430, 608 427, 591 426, 570 422, 548 416, 523 409, 492 401, 471 396, 447 390, 426 385, 408 381, 393 376, 381 373, 371 370, 320 350), (330 360, 329 347, 327 334, 327 321, 325 307, 325 295, 325 284, 325 274, 325 262, 325 251, 325 239, 325 226, 325 216, 325 202, 325 190, 325 180, 325 170, 325 160, 330 160), (315 163, 325 167, 335 171, 346 173, 359 174, 371 174, 385 174, 398 175, 412 176, 428 178, 439 178, 452 181, 463 181, 477 183, 494 184, 508 186, 524 187, 540 189, 553 189, 567 189, 580 191, 592 191, 604 191, 615 191, 627 191, 638 191, 640 190), (635 177, 628 189, 620 202, 616 216, 610 234, 607 245, 604 257, 600 269, 597 279, 594 293, 592 303, 589 313, 588 323, 586 334, 585 344, 584 354, 581 373, 578 393, 577 404, 575 414, 573 425, 573 435, 570 452, 567 467, 566 477, 565 486), (399 395, 411 390, 424 384, 439 380, 449 377, 468 372, 478 369, 488 368, 504 363, 518 359, 528 358, 539 355, 550 353, 563 351, 573 349, 588 343, 599 341, 609 338, 620 336, 630 332, 642 329, 650 330), (600 280, 592 272, 582 266, 570 260, 560 254, 552 248, 544 242, 536 236, 527 231, 517 225, 507 219, 499 213, 490 208, 481 200, 473 193, 465 186, 457 180, 448 174, 450 170))")
        self.assertEqual(3, len(case5.ext.polygonize().do()))

        case6 = wkt_loads(
            "MULTILINESTRING ((590 440, 396 394, 390 180, 730 200, 590 440), (560 390, 470 360, 470 250, 600 250, 560 390))")
        self.assertEqual(2, len(case6.ext.polygonize().do()))

    def test_polygonize_linestring(self):
        case7 = wkt_loads(
            "LINESTRING (-268815.1065534503 -282370.6869054238, -271018.2423112827 -278867.9218256024, -272852.9614120621 -275158.882031635, -274300.1614418256 -271282.1846684694, -275344.7746914075 -267278.1924693441, -275970.1604063793 -263225.9459791461, -276133.1291718157 -261091.0106216712, -276133.1291717999 -259055.9671881658, -276133.1291717999 -83046.07342921416, -280375.7698589192 -78803.43274209488, -450289.5579840841 -78803.43274209855, -454626.3737807088 -83566.16947715978, -454626.3737807088 -404161.0117815263, -450383.7330935751 -408403.6524686573, -401126.3737807087 -408403.6524686573, -360366.3480360038 -408403.6524686387, -311529.7217335654 -408403.6524686569, -302500.4430309253 -396582.6178049854, -270441.0184819785 -354583.3682278187, -236125.3255074212 -309634.1763214277, -260209.5751477788 -291246.7780383254, -261827.0985610569 -290011.8611247449, -263425.1258995919 -288586.7939598755, -266266.492369872 -285630.7077819313)")
        self.assertEqual(1, len(case7.ext.polygonize().do()))

        case8 = wkt_loads("LINESTRING (-458800 -159125, -462725 -161600, -455250 -163125, -460225 -165850)")
        self.assertEqual(0, len(case8.ext.polygonize().do()))

        case11 = LineString([(0, 0), (100, 0), (100, 100)])
        self.assertEqual(1, len(case11.ext.polygonize().do()))

    def test_polygonize_geometrycollection(self):
        case9 = GeometryCollection([box(0, 0, 2, 10), box(1, 1, 3, 4).exterior])
        result9 = case9.ext.polygonize().do(keep_origin_polygon=True)
        self.assertEqual(2, len(result9))
        self.assertTrue(result9[0].intersects(result9[1]))

    def test_polygonize_multipolygon(self):
        case10 = wkt_loads(
            "MULTIPOLYGON (((50 230, 86 230, 86 195, 50 195, 50 230)),((110 230, 150 230, 150 180, 110 180, 110 230)))")
        self.assertEqual(2, len(case10.ext.polygonize().do()))

    def test_polygonize_with_crack(self):
        self.assertTrue(LineString([(0, 0), (1, 0), (0, 1), (0, 0)]).is_ring)

        line = wkt_loads(
            "LINESTRING (505592.820085355 -956807.6358030335, 506214.501827698 -954282.8097464009, 505360.8997185439 -966916.968000267, 500050.0920377449 -956747.6212427488, 505592.8768567879 -956807.4052381279, 505592.820085355 -956807.6358030335)")
        self.assertFalse(line.is_ring)
        self.assertTrue(line.is_closed)
        self.assertFalse(line.is_simple)

        polys: List[Polygon] = line.ext.polygonize().do(keep_origin_polygon=True)

        self.assertEqual(1, len(polys))
        self.assertTrue(polys[0].is_valid)
        self.assertTrue(polys[0].is_simple)
        self.assertTrue(isinstance(polys[0], Polygon))
        self.assertAlmostEqual(30873853.872921683, polys[0].area)

    def test_polygonize_with_extra_line_parts(self):
        geom = wkt_loads(
            "LINESTRING (302981.8333201753 382989.1014399816, 303431.8286371576 382209.682603388, 304904.0763815986 383059.6785531331, 304604.0805196513 383579.2868476201, 308587.8646173822 385879.3004031468, 312837.8145870315 378518.0556693364, 307381.8562979447 375368.0567083647, 307781.8592311489 374675.2087717343, 304317.7294088351 372675.2575311948, 303617.9110883819 373887.3860020925, 301457.3273620354 372639.9907651236, 301457.3274069773 365889.4308605481, 303357.6252425658 365889.4174094488, 303357.6132092225 364189.4308586408, 308757.3273604857 364189.4308610249, 308757.3273614394 362189.4309969235, 309357.3292882191 362189.4309974004, 309357.329290961 356389.4309964467, 306957.3273385513 356389.4309964467, 306957.3273385513 356989.430861025, 305757.3273385512 356989.430861025, 305757.3273385512 356389.4309964467, 304057.3292304622 356389.4308686544, 304057.3292907225 355589.4175443937, 300357.3273386108 355589.4175443937, 300357.3273386108 356189.4308610251, 298957.3273386108 356189.4308610251, 298957.3273386108 355589.4175443937, 295257.3285336839 355589.4175443937, 295257.3273230539 356389.4306531241, 293557.32733873 356389.430861025, 293557.32733873 356989.430861025, 292357.3273386704 356989.430861025, 292357.3273386704 356389.4308605481, 289957.3273229945 356389.4308605481, 289957.329324578 362189.0516987136, 290556.060646032 362189.0514936735, 290557.3276572572 364187.964536219, 295957.3267169343 364189.4309068013, 295957.3266584026 365689.0507669736, 293907.3273148285 365689.0506868651, 293907.3273148285 369889.0507016469, 291307.4036093699 369889.0448417951, 291307.4036093699 368489.3229861547, 287507.3273738967 368489.3229861547, 287507.3273738967 369289.3468690205, 285607.3253073441 369289.3468690205, 285607.3253073441 369889.4308862973, 284307.3273423659 369889.4308862973, 284307.3253070461 369289.3380575468, 281707.5244948016 369289.3468752196, 281707.3564730631 374488.9426598836, 282307.3404401886 374489.4309497168, 282307.3404401886 376189.378876238, 287507.321361159 376189.338894396, 287507.3290499198 377189.3259749699, 292807.3273575055 377189.4566397954, 292807.3510047542 374689.4309926322, 298406.4732380854 374689.4309926322, 298590.5367981541 374795.7542753507, 297790.2319671857 376181.2187352468, 300041.898115729 377481.2188945104, 298841.8980267989 379559.6798539449, 300660.5475889193 380609.6776657393, 300210.5487068044 381389.0985932637, 302981.8333201753 382989.1014399816, 302981.833254789 382989.1014023115, 302981.8333201753 382989.1014399816)")
        polys: List[Polygon] = geom.ext.polygonize().do(keep_origin_polygon=True)
        self.assertEqual(1, len(polys))
        self.assertTrue(polys[0].is_valid)
        self.assertTrue(polys[0].is_simple)
        self.assertTrue(isinstance(polys[0], Polygon))
