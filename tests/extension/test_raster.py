from unittest import TestCase

import pytest
from numpy import ones, array, int32
from shapely.extension.util.insertion.inserter import raster_inserter

from shapely.extension.constant import MATH_MIDDLE_EPS
from shapely.extension.model.raster import RasterFactory, Raster
from shapely.geometry import Polygon, LineString, Point
from shapely.geometry.base import BaseGeometry
from shapely.ops import unary_union
from shapely.wkt import loads


@pytest.mark.local
class TestRaster(TestCase):
    def test_from_geom(self):
        poly_geom = Polygon(([(2, 2), (4, 2), (4, 3), (2, 3)]))
        result = RasterFactory().from_geom(poly_geom)
        self.assertIsInstance(result, Raster)
        self.assertEqual(result.array.shape, (11, 21))
        self.assertTrue(result.origin.ext.similar(Point(2, 2), 1e-6))

        linestring_geom = LineString([(1.25, 1.25), (3.65, 3.65)])
        result = RasterFactory().from_geom(linestring_geom)
        self.assertIsInstance(result, Raster)
        self.assertEqual(result.array.shape, (25, 25))

        point_geom_1 = Point(2.22, 2.22)
        result = RasterFactory().from_geom(point_geom_1)
        self.assertIsInstance(result, Raster)
        self.assertEqual(result.array.shape, (1, 1))

    def test_move_to_origin(self):
        poly1 = Polygon(([(2, 2), (4, 2), (4, 3), (2, 3)]))
        poly2 = Polygon(([(1, 4), (2, 4), (2, 7), (1, 7)]))
        moved_geoms = RasterFactory()._move_to_origin(unary_union([poly1, poly2]), anchor_point=Point(1, 2))
        moved_poly1 = Polygon(([(1, 0), (3, 0), (3, 1), (1, 1)]))
        moved_poly2 = Polygon(([(0, 2), (1, 2), (1, 5), (0, 5)]))
        moved_poly_union = unary_union([moved_poly1, moved_poly2])
        self.assertTrue(moved_poly_union.ext.similar(moved_geoms, MATH_MIDDLE_EPS))

    def test_draw_on(self):
        point = Point(1, 1)
        line = LineString([(1, 2), (2, 4)])
        poly = Polygon(([(3, 0), (5, 1), (5, 2), (3, 2)]))
        img = array([[0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0]], dtype=int32)
        RasterFactory()._draw_on(img, unary_union([point, line, poly]))
        arr = array(img)
        self.assertTrue((arr == array([[0, 0, 0, 1, 1, 0],
                                       [0, 1, 0, 1, 1, 1],
                                       [0, 1, 0, 1, 1, 1],
                                       [0, 1, 0, 0, 0, 0],
                                       [0, 0, 1, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0]])).all())

    def test_real_case(self):
        polys = loads(
            'MULTIPOLYGON (((34.362333286818625 -1.4120922072689837, 35.462333286818634 -1.4120922072689837, 35.462333286818634 -1.9120922072689837, 34.362333286818625 -1.9120922072689837, 34.362333286818625 -2.5120922072688927, 33.362333286818625 -2.5120922072688927, 33.362333286818625 1.6379077987317032, 33.212333287318614 1.6379077987317032, 33.212333287318614 1.8879077987317032, 33.862333286818625 1.8879077987317032, 33.862333286818625 -1.4120922072689837, 34.362333286818625 -1.4120922072689837)), ((38.01233328681863 -1.9120922072689837, 38.01233328681863 -1.4120922072689837, 39.112333286818625 -1.4120922072689837, 39.112333286818625 1.6379077937308466, 39.612333286818625 1.6379077937308466, 39.612333286818625 -0.9120922072689837, 40.112333286818625 -0.9120922072689837, 40.112333286818625 -1.9120922072689837, 39.112333286818625 -1.9120922072689837, 38.01233328681863 -1.9120922072689837)), ((32.06233328681844 3.637907798731817, 35.01233328681843 3.637907798731021, 35.01233328681863 3.1379077838023477, 35.66233328681864 3.137907785730931, 35.66233328681864 2.7379077857308403, 34.712333286818634 2.73790778344528, 34.712333286818634 3.337907798730953, 32.31233328681866 3.3379077987317487, 32.31233328681866 1.8879077987317032, 32.512333287318654 1.8879077987317032, 32.512333287318654 1.6379077987317032, 32.06233328681866 1.6379077987317032, 32.06233328681844 3.637907798731817)), ((39.56233328681863 2.7379077930642097, 39.212333286818634 2.7379077930642097, 39.212333286818634 2.7379078342574985, 39.11233328703884 2.737907834257612, 39.11233328703773 5.287907794312332, 39.00212617185103 5.287907793731051, 38.56233328681863 5.287907793731051, 38.56233328681863 5.587907793731233, 39.612333286818625 5.587907793731233, 39.612333286818526 2.7379078342574985, 39.56233328681863 2.7379078342574985, 39.56233328681863 2.7379077930642097)), ((35.41233328681864 5.337907793730778, 35.41233328681864 5.837907793730665, 35.912333287025916 5.837907793730665, 35.912333287025916 6.187907794293437, 36.112333286818625 6.187907794293437, 36.112333286818625 5.337907793730778, 35.41233328681864 5.337907793730778)), ((30.062333290919284 5.937907799127856, 30.062333290919284 8.337907799127947, 29.4623332779193 8.337907799127947, 29.462333277919228 9.28790779912788, 29.86233327791919 9.28790779912788, 29.86233327791932 8.637907799128016, 30.362333290919295 8.637907799128016, 30.362333290919295 5.687907799127856, 28.362333290919267 5.687907799127856, 28.362333290919267 6.137907799627897, 28.612333290919295 6.137907799627897, 28.612333290919295 5.937907799127856, 30.062333290919284 5.937907799127856)), ((28.612333290919295 7.4879077991275835, 28.612333290919295 6.837907799627715, 28.362333290919267 6.837907799627715, 28.362333290919267 6.987907799127811, 24.212333338919322 6.987907799126788, 24.212333338919322 7.587907798996071, 24.812333232566047 7.587907798996071, 24.812333232566047 9.087907799127038, 25.212333338919336 9.087907799127038, 25.212333338919336 7.987907799127015, 25.212333338919336 7.487907799126901, 28.612333290919295 7.4879077991275835)), ((32.06233328591928 9.737907799127811, 32.91233328650932 9.737907799127811, 32.91233328650932 9.537907799530899, 32.56233328591922 9.537907799530899, 32.56233328591922 9.03790779912788, 32.06233328591928 9.03790779912788, 32.06233328591928 9.737907799127811)), ((36.765187720578425 10.36355423730015, 37.383906154406034 9.744835803472597, 37.101063494478424 9.461993143544873, 36.48234506065083 10.08071157737254, 36.765187720578425 10.36355423730015)), ((35.121164508710535 10.02767857070694, 34.90903247435452 10.239810605062871, 35.89898196807742 11.229760099185228, 36.34092370639243 10.787818360864208, 36.05808099384602 10.504975648559594, 35.82827129016172 10.734785352235917, 35.121164508710535 10.02767857070694)), ((36.21619277946313 12.878306242913368, 39.34160475215673 9.752894270240631, 39.34160475215673 9.752894270240176, 39.214325519811524 9.62561503790937, 36.08891354711632 12.751027010580628, 36.21619277946313 12.878306242913368)), ((26.212333233919196 12.137907940127093, 24.812333232566047 12.137907940127093, 24.812333232566047 12.837907939996057, 24.812333232566004 13.137907940127207, 28.362333285919277 13.137907940127207, 28.362333285919277 12.637907940128002, 26.212333233919196 12.63790794012732, 26.212333233919196 12.137907940127093)), ((32.06233328474208 11.825127212871053, 32.06233328503052 12.637907799695881, 29.4623332779193 12.637907799543768, 29.4623332779193 13.137907940298192, 32.31233328591928 13.137907939957358, 32.31233328591928 13.13790793489352, 34.062333319554725 13.13790793489352, 34.06233318389182 14.737907794110015, 34.56233322362263 14.737907794076591, 34.56233317838132 12.566408885032843, 35.02077215244182 12.107969914910655, 34.737929440126734 11.825127202507815, 32.31233329102304 11.825127212715302, 32.31233328591928 12.481518509559919, 32.31233328591928 11.825127212715302, 32.06233328474208 11.825127212871053)), ((29.46233328665332 19.837907794127318, 29.46233328591927 20.287907794127705, 32.46233328591927 20.287907794127705, 32.46233328591927 20.78790779912765, 32.762333286360416 20.78790779912765, 32.762333286621214 20.28782408530617, 32.762333286621214 20.787907795335173, 34.712333286818634 20.78790779414544, 34.712333286818634 20.287907794144417, 39.16233328703352 20.287907794144417, 39.16233328703352 19.787907794144758, 34.56233328681732 19.787907794145667, 34.56233328682163 18.187907794251146, 34.06233328682163 18.187907794251146, 34.06233328681843 19.787907794145667, 32.762333286881926 19.787907795335514, 32.762333286881926 19.787907791542807, 29.46233328717473 19.78790779665735, 29.46233328665332 19.83790779412743, 29.46233328665332 19.837907794127318)), ((26.21233323391924 20.78790779412725, 26.21233323391924 20.287907794127705, 28.362333285919277 20.287907794127705, 28.362333285919277 19.78790779412782, 23.31233321756605 19.787907794127022, 23.31233321756605 20.78790779412725, 23.7123331839193 20.78790779412725, 23.7123331839193 20.287907794127136, 24.712333233919196 20.287907794127136, 24.71233323391924 20.78790779412725, 26.21233323391924 20.78790779412725)), ((32.21233328591927 23.53790779912788, 32.21233328591927 22.03790779912788, 32.762333285919226 22.03790779912788, 32.762333285919226 21.637907799127902, 31.912333285919274 21.637907799127902, 31.912333285919274 22.03790779912788, 31.912333285919274 23.53790779912788, 31.912333285919274 23.837907799127834, 30.412333285919274 23.837907799127834, 30.412333285919274 24.23790779912781, 31.912333285919274 24.23790779912781, 32.412333285919274 24.23790779912781, 32.412333285919274 23.737907799429763, 32.762333286089515 23.737907799429763, 32.762333286089515 23.53790779912788, 32.21233328591927 23.53790779912788)), ((27.112333285919277 23.837907799127834, 27.112333285919277 24.337907799127038, 23.7123331839193 24.337907799127038, 23.7123331839193 23.83790779912681, 23.7123331839193 22.737907799127015, 23.31233321756605 22.737907799127015, 23.31233321756605 24.237907798996048, 22.71233318391927 24.237907798996048, 22.71233318391927 24.83790779899607, 27.412333285919274 24.83790779899607, 27.412333285919274 23.837907799127834, 27.112333285919277 23.837907799127834)), ((46.01233328720363 -1.5620922057132702, 46.06233326690263 -1.5620922057132702, 46.06233326690263 -1.912092206325383, 46.01233328720363 -1.912092206325383, 46.01233328720363 -1.5620922057132702)), ((50.212333286818634 -3.012092247269038, 50.712333286818634 -3.012092247269038, 50.712333286818634 0.3879077937308466, 50.212333286818634 0.3879077937308466, 50.212333286818634 0.6879077937308011, 51.21233328546542 0.6879077937308011, 51.21233328546542 -4.012092247269038, 50.612333285465425 -4.012092247269038, 50.612333285465425 -3.412092203400107, 49.112333286818625 -3.412092203400107, 49.112333286818625 -3.012092247269038, 50.212333286818634 -3.012092247269038)), ((47.06233328681863 -3.412092203400107, 46.06233328681863 -3.412092203400107, 46.06233328681863 1.6379077937308466, 46.56233328681863 1.6379077937308466, 46.56233328681863 -2.512092247269038, 47.06233328681863 -2.512092247269038, 47.06233328681863 -3.412092203400107)), ((42.66233328676452 -1.562092207296132, 42.66233328681864 2.737907793730983, 43.01233328681863 2.737907793730983, 43.01233328676463 -1.562092207296132, 43.61233328476463 -1.562092207296132, 43.61233328481863 -1.9120922072689837, 42.06233329150403 -1.9120922072689837, 42.06233329144992 -1.562092207296132, 42.66233328676452 -1.562092207296132)), ((46.56233328681863 2.737907793730983, 46.112333286818625 2.737907793730983, 46.112333286818625 2.737907834745556, 46.062333286692834 2.7379078347389623, 46.062333286692834 6.037907794269131, 47.16233328700012 6.037907794269131, 47.16233327804443 5.7379078167308535, 46.56233328681863 5.7379078167308535, 46.56233328681863 2.737907793730983)), ((50.612333286818625 5.687907793730801, 50.612333286818625 5.187907793730574, 50.612333286818625 3.6879078847309756, 50.212333286818634 3.6879078847309756, 50.212333286818634 5.187907793730574, 49.91233328681864 5.187907793730574, 49.91233328681864 5.187907884730976, 48.41233328681864 5.187907884730976, 48.01233328681863 5.187907884730976, 48.01233328681863 6.037907884730998, 48.41233328681864 6.037907884730998, 48.41233328681864 5.48790788473093, 49.91233328681864 5.48790788473093, 49.91233328681864 6.037907794129637, 50.112333287155025 6.037907794129637, 50.112333287155025 5.687907793730801, 50.612333286818625 5.687907793730801)), ((42.66233328661103 7.387907791614111, 42.26233328649103 7.387907791614111, 42.26233328649103 7.887907791614111, 43.41233328676283 7.887907793741988, 43.41233328676283 7.387907793741988, 43.01233328661104 7.387907791614111, 43.01233328661104 7.072618169033149, 43.01233328681863 4.637907794731063, 42.66233328681864 4.637907794731063, 42.66233328661103 7.072618169033149, 42.66233328661103 7.387907791614111)), ((37.80817027790623 9.320571789640667, 38.68908372872153 8.439658338393542, 39.24254292313603 7.8879077917915765, 41.11233328732523 7.88790779342969, 41.11233328697122 7.387907791339899, 41.031968621089135 7.387907791616158, 38.34811962162762 7.387907791611838, 38.348119620964326 8.214937021644005, 38.05565765111582 8.50739899149255, 37.34855086703942 7.800292207415964, 37.136418832744226 8.012424241711415, 37.84352561682063 8.71953102578766, 37.525327565375434 9.037729077232825, 37.80817027790623 9.320571789640667)), ((44.712333286654726 7.887907794838952, 44.712333286039126 12.287907794173861, 45.212333285948915 12.287907794354282, 45.21233328740452 7.887907794673083, 46.51233328696583 7.88790779432054, 46.51233328696583 7.387907794320313, 44.56233328669403 7.387907795371007, 44.56233328724963 7.88790779509327, 44.712333286654726 7.887907794838952)), ((48.56233328518333 8.487907691966825, 48.56233328518333 8.987907691966825, 50.16233328518334 8.987907691966825, 50.16233328518334 9.937907793752856, 50.762333285236025 9.937907793752856, 50.762333285236025 15.887907793752788, 50.26233328550204 15.887907793752788, 50.26233328550204 17.087907793752606, 51.26233328552203 17.087907793752606, 51.26233328537762 8.487907794522698, 51.21233328546542 8.487907794522698, 51.21233328546542 8.487907691966825, 50.16233328518334 8.487907691966825, 48.56233328518333 8.487907691966825)), ((57.36233328550243 9.737907793752584, 57.86233328533662 9.737907793752584, 57.86233328533662 15.887907793752788, 57.36233328550203 15.887907793752788, 57.36233328550203 17.087907793752606, 58.36233328562203 17.087907793752606, 58.36233328548232 8.487907794522698, 55.76233328550242 8.487907794522698, 55.76233328550242 8.987907691966825, 57.36233328550243 8.987907691966825, 57.36233328550243 9.737907793752584)), ((43.20947884489193 11.202463171535555, 42.74985943725933 11.662082578665945, 42.891280793496634 11.803503934902892, 43.412333286949035 11.282451442748538, 43.412333286950116 11.12247490111929, 41.54777790940993 9.257919523579062, 35.89092366019953 14.91477377172555, 37.76405767925273 16.78790779389533, 37.90687693582343 16.78790779389533, 38.43650807149662 16.258276656902922, 38.29508671525933 16.11685530066552, 37.835467307188125 16.57647470923962, 36.17376637255653 14.914773771842874, 39.709300278358725 11.379239867002411, 41.37100121414062 13.040940802784348, 40.91138180625933 13.50056021066564, 41.05280316249663 13.641981566903041, 42.11346333449663 12.581321394903057, 41.97204197825933 12.439900038665769, 41.512422570378035 12.89951944654706, 39.85072163446374 11.237818510632792, 41.547777909346024 9.540762235989632, 43.20947884489193 11.202463171535555)), ((45.962333285183234 14.187907793752856, 46.46233329350201 14.187907793752856, 46.46233329350201 15.987907793571708, 46.36233329350202 15.987907793571708, 46.36233329350202 16.48790779375213, 46.96233329350201 16.48790779375213, 46.962333285183234 14.187907793752856, 46.962333285183234 13.187907793752743, 45.962333285183234 13.187907793752743, 45.962333285183234 13.58790779395838, 44.783832198586936 13.587907793258637, 43.606576096953134 14.765163894477723, 43.96012948754172 15.118717285129605, 44.99951762198903 14.087907794455987, 45.962333285183234 14.08790779325841, 45.962333285183234 14.187907793752856)), ((40.96233343999383 20.987907793645718, 40.962333388818024 18.125092027714913, 41.58313294516722 17.495713827502755, 41.22957955465071 17.1421604369865, 40.462333388818024 17.909406602761692, 40.46233333807622 20.987907793645718, 40.06233338871132 20.987907793645718, 40.06233338871132 21.987907793645718, 41.06233338871132 21.987907793645718, 43.362333388711335 21.987907793645945, 43.362333388711335 21.38790779364581, 42.862333388711335 21.38790779364581, 42.862333388711335 21.48790779364583, 41.06233338871132 21.48790779364583, 41.06233338871132 20.987907793645718, 40.96233343999383 20.987907793645718)), ((35.36233328692522 25.18790779364599, 35.36233328692522 26.287907793864292, 36.812333388572625 26.287907793864292, 42.762333388711326 26.287907793964564, 43.96233338871133 26.287907793964564, 43.96233338871133 25.287907793964564, 42.762333388711326 25.287907793964564, 42.762333388711326 25.787907793698537, 36.81233338871132 25.787907793698537, 36.81233338871132 25.18790779364599, 35.86233328692522 25.18790779364599, 35.86233328692522 23.587907793645854, 35.36233328692522 23.587907793645854, 35.36233328692522 25.18790779364599)), ((35.36233328692522 30.787907793964905, 35.36233328692522 32.38790779396493, 35.36233328692522 33.38790779396493, 36.612333388585924 33.38790779396493, 42.762333388711326 33.3879077940652, 43.96233338871133 33.38790779396459, 43.96233338871133 32.38790779396459, 42.762333388711326 32.38790779396459, 42.762333388711326 32.88790779379917, 36.612333388711335 32.88790779379917, 36.612333388711335 32.38790779396493, 35.86233328692522 32.38790779396493, 35.86233328692522 30.787907793964905, 35.36233328692522 30.787907793964905)))')
        input_raster = polys.ext.raster(scale_factor=10)
        kernel = Polygon(([(0, 0), (2, 0), (2, 4), (0, 4)]))
        kernel_raster = kernel.ext.raster(scale_factor=10)
        result_raster = input_raster.convolution(kernel_raster)
        result = result_raster.vectorize()
        self.assertTrue(all([isinstance(single_result, BaseGeometry) for single_result in result]))

        kernel_line = LineString([(1, 1), (4, 4)])
        result = input_raster.convolution(kernel_line.ext.raster()).vectorize()
        self.assertTrue(all([isinstance(single_result, BaseGeometry) for single_result in result]))

        result = kernel.ext.insertion(polys, space=polys.envelope.ext.rbuf(5))
        self.assertTrue(all([isinstance(single_result, BaseGeometry) for single_result in result]))

        space2 = polys.envelope.ext.rbuf(2).difference(polys)
        result = kernel.ext.insertion(polys.ext.decompose(Polygon).list()[0], space=space2)
        self.assertNotIsInstance(unary_union(result), Polygon)

        result = kernel.ext.insertion()
        self.assertFalse(result[0])

    def test_vectorize(self):
        poly_with_hole = Polygon(shell=([(0, 0), (20, 0), (20, 20), (0, 20)]),
                                 holes=[([(7, 7), (9, 7), (9, 9), (7, 9)]), ([(11, 11), (13, 11), (13, 13), (11, 13)])])
        poly2 = Polygon(shell=([(0, 30), (20, 30), (20, 50), (0, 50)]),
                        holes=[([(10, 40), (15, 40), (15, 45), (10, 45)])])
        raster = unary_union([poly_with_hole, poly2]).ext.raster()
        result = raster.vectorize()
        # 20个角,每个角有缩放倍数*像素面积的误差
        self.assertTrue(unary_union(result).ext.similar(unary_union([poly_with_hole, poly2]), 20 * 0.5 / 10))

    def test_vectorize_without_holes(self):
        poly1 = Polygon(([(10, 0), (20, 10), (10, 30), (0, 10)]))
        poly2 = Polygon(([(30, 0), (40, 0), (40, 10), (30, 10)]))
        poly = unary_union([poly1, poly2])
        raster = poly.ext.raster()
        result = raster.vectorize()
        self.assertTrue(unary_union(result).ext.similar(poly, 1))  # 斜线累计误差要大的多

    def test_filter2d(self):
        raster1 = Raster(ones((10, 10)),
                         origin=Point(0, 0),
                         scale_factor=10)
        raster2 = Raster(ones((3, 3)),
                         origin=Point(0, 0),
                         scale_factor=10)
        result = raster1.convolution(raster2)
        self.assertIsInstance(result, Raster)
        self.assertEqual(result.array.shape, (10, 10))

    def test_poly_in_hole(self):
        outside_polygon = Polygon(shell=([(0, 0), (100, 0), (100, 100), (0, 100)]),
                                  holes=[([(2, 2), (98, 2), (98, 98), (2, 98)])])
        middle_polygon = Polygon(shell=([(4, 4), (96, 4), (96, 96), (4, 96)]),
                                 holes=[([(10, 10), (90, 10), (90, 90), (10, 90)])])
        inside_polygon1 = Polygon(([(15, 15), (20, 15), (15, 20)]))
        inside_polygon2 = Polygon(([(30, 30), (40, 30), (40, 40), (30, 40)]))
        inside_point = Point(30, 70)
        poly_union = unary_union([outside_polygon, middle_polygon, inside_polygon2, inside_polygon1, inside_point])
        result = poly_union.ext.raster().vectorize()
        self.assertEqual(len(result), 5)


@pytest.mark.local
class TestRasterInserter(TestCase):
    def test_no_space(self):
        obstacle = LineString([(0, 0), (2, 2)]).ext.rbuf(0.5)
        insert_polygon = LineString([(0, 0), (0.5, 0)]).ext.rbuf(0.25)
        result = raster_inserter(insert_geom=insert_polygon, obstacle=obstacle)
        self.assertEqual(len(result), 2)
        self.assertTrue(all([isinstance(single_result, Polygon) for single_result in result]))

    def test_no_obstacle(self):
        space = Polygon(([(0, 0), (10, 0), (20, 10), (20, 20)]), [([(4, 1), (6, 1), (6, 5), (4, 3)])])
        insert_polygon = Polygon(([(0, 0), (2, 0), (2, 2), (0, 2)]))
        result = raster_inserter(insert_geom=insert_polygon, obstacle=None, space=space)
        expected_result = [Polygon(([(7, 1), (9, 1), (19, 11), (19, 17), (7, 5)]))]
        self.assertEqual(len(result), 1)
        self.assertTrue(expected_result[0].covers(result[0]))
        self.assertTrue(expected_result[0].ext.similar(result[0], area_diff_tol=expected_result[0].length * 0.2))

    def test_no_space_no_obstacle(self):
        insert_polygon = Polygon(([(0, 0), (2, 0), (2, 2), (0, 2)]))
        result = raster_inserter(insert_geom=insert_polygon, obstacle=None, space=None)
        self.assertEqual(len(result), 1)
        self.assertEqual(result, [Polygon()])

    def test_space_and_obstacle(self):
        space = Polygon(([(0, 0), (10, 0), (20, 10), (20, 20)]), [([(4, 1), (6, 1), (6, 5), (4, 3)])])
        obstacle = Polygon(([(10, 2), (15, 7), (15, 13), (10, 8)]))
        insert_polygon = Polygon(([(0, 0), (2, 0), (2, 2), (0, 2)]))
        result = raster_inserter(insert_geom=insert_polygon, obstacle=obstacle, space=space)
        expected_result = [Polygon(([(7, 1), (9, 1), (9, 7), (7, 5)]),), Polygon(([(16, 8), (19, 11), (19, 17), (16, 14)]))]
        self.assertEqual(len(result), 2)
        self.assertTrue(expected_result[0].covers(result[0]))
        self.assertTrue(expected_result[0].ext.similar(result[0], area_diff_tol=expected_result[0].length * 0.2))
        self.assertTrue(expected_result[1].covers(result[1]))
        self.assertTrue(expected_result[1].ext.similar(result[1], area_diff_tol=expected_result[1].length * 0.2))

    def test_obstacle_out_of_space(self):
        space = Polygon(([(0, 0), (10, 0), (10, 10), (0, 10)]))
        obstacle = Polygon(([(0, 12), (20, 12), (20, 20), (18, 20), (18, 14), (0, 14)]))
        insert_polygon = Polygon(([(0, 0), (2, 0), (2, 2), (0, 2)]))
        result = raster_inserter(insert_geom=insert_polygon, obstacle=obstacle, space=space)
        expected_result = [Polygon(([(1, 1), (9, 1), (9, 9), (1, 9)]))]
        self.assertEqual(len(result), 1)
        self.assertTrue(result[0].ext.similar(expected_result[0], area_diff_tol=0.1 * (8 - 0.1) * 4))

