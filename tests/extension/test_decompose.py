from unittest import TestCase

from shapely.extension.geometry.straight_segment import StraightSegment
from shapely.extension.util.decompose import decompose
from shapely.geometry import MultiPolygon, box, Point, LineString, GeometryCollection, MultiPoint, Polygon, \
    LinearRing
from shapely.wkt import loads


class DecomposeTest(TestCase):
    def test_decompose_multipolygon_to_point(self):
        multipolygon = MultiPolygon([box(0, 0, 1, 1), box(1, 1, 2, 2)])
        points = decompose(multipolygon, target_class=Point)
        self.assertTrue(all(isinstance(geom, Point) for geom in points))
        self.assertEqual(10, len(points))

    def test_decompose_multipolygon_to_linestring(self):
        multipolygon = MultiPolygon([box(0, 0, 1, 1), box(1, 1, 2, 2)])
        lines = decompose(multipolygon, target_class=LineString)
        self.assertTrue(all(isinstance(geom, LineString) for geom in lines))
        self.assertEqual(2, len(lines))

    def test_decompose_geometry_collection_to_point(self):
        # each box has 5 points, including extra point equal to the first point
        geom_col = GeometryCollection([MultiPolygon([box(0, 0, 1, 1), box(1, 1, 2, 2)]),
                                       Point(0, 1),
                                       LineString([(1, 1), (2, 2)])])
        points = decompose(geom_col, target_class=Point)

        self.assertTrue(all(isinstance(geom, Point) for geom in points))
        self.assertEqual(13, len(points))

    def test_falsy_case_of_decomposing_multipoint_to_polygon(self):
        multipoint = MultiPoint([Point(0, 0), Point(1, 1)])
        result = decompose(multipoint, target_class=Polygon)
        self.assertTrue(isinstance(result, list))
        self.assertEqual(0, len(result))

        result = decompose(multipoint, target_class=Polygon, remaining_low_dim_obj=True)
        self.assertTrue(isinstance(result, list))
        self.assertEqual(1, len(result))
        self.assertEqual(multipoint, result[0])

    def test_decompose_linestring_to_segment(self):
        linestring = LineString([(0, 0), (1, 1), (2, 1), (2, 3), (5, 3)])
        segments = linestring.ext.decompose(StraightSegment).to_list()
        self.assertEqual(len(segments), 4)

        linearring = LinearRing([(0, 0), (1, 1), (2, 1), (2, 3), (5, 3), (5, 0), (0, 0)])
        segments = linearring.ext.decompose(StraightSegment).to_list()
        self.assertEqual(len(segments), 6)

    def test_for_geometry_collection_that_might_deduce_wrong_type_obj(self):
        geom_col = loads(

        result = geom_col.ext.decompose(LineString).to_list()
        self.assertTrue(all(isinstance(item, LineString) for item in result))

    def test_keep_direction_from_polygon_to_straight_segments(self):
        ccw_polygon = Polygon(([(0, 0), (10, 0), (20, 14), (10, 20), (0, 0)]))
        cw_polygon = Polygon(([(0, 0), (10, 20), (20, 14), (10, 0), (0, 0)]))
        ccw_decomposed_segments = decompose(ccw_polygon, target_class=StraightSegment)
        cw_decomposed_segments = decompose(cw_polygon, target_class=StraightSegment)
        ccw_lines = [StraightSegment([(0, 0), (10, 0)]),
                     StraightSegment([(10, 0), (20, 14)]),
                     StraightSegment([(20, 14), (10, 20)]),
                     StraightSegment([(10, 20), (0, 0)])]
        cw_lines = [StraightSegment([(0, 0), (10, 20)]),
                    StraightSegment([(10, 20), (20, 14)]),
                    StraightSegment([(20, 14), (10, 0)]),
                    StraightSegment([(10, 0), (0, 0)])]
        self.assertTrue(all([ccw_decomposed_segments[i] == ccw_lines[i] for i in range(len(ccw_lines))]))
        self.assertTrue(all([cw_decomposed_segments[i] == cw_lines[i] for i in range(len(cw_lines))]))

    def test_decompose_invalid_linear_ring_to_point(self):
        ring = LinearRing([(0, 0), (0.5, 0), (0.5, 0.5), (0.5, 0), (1, 0), (1, 1), (0, 1), (0, 0)])
        points = decompose(ring, target_class=Point)
        self.assertEqual(8, len(points))