from shapely.extension.util.insertion.minkowski_insertion import MinkowskiInsertion
from shapely.geometry import Polygon
from shapely.wkt import loads


def test_insert_convex_into_non_hole_concave():
    convex = loads('POLYGON ((-0.1 1.2, -0.9 -0.6, 1.3 -0.3, -0.1 1.2))')
    non_hole_concave = loads(
        'POLYGON ((-3.3 5.9, 5.6 6.1, 5.6 7.1, -4.7 7.1, -8.1 0.9, -0.2 2, -0.2 3.1, -5.4 2.4, -3.3 5.9))')

    space = non_hole_concave.envelope
    res = MinkowskiInsertion(convex).of(space=space, obstacle=non_hole_concave)
    assert len(res) == 2
    for poly in res:
        assert isinstance(poly, Polygon)
        assert poly.is_valid
        assert not poly.is_empty


def test_insert_concave_into_polygon_with_holes():
    concave = loads("POLYGON ((-50 60, 93 45, -20 10, 60 -60, -80 -40, -50 60))")
    poly_with_hole = loads(
        "POLYGON ((80 370, -56 155, 216 -14, 400 80, 410 350, 80 370), (160 320, 362 215, 180 80, 50 170, 160 320))")

    space = poly_with_hole.envelope
    res = MinkowskiInsertion(concave).of(space=space, obstacle=poly_with_hole)
    assert len(res) == 4
    for poly in res:
        assert isinstance(poly, Polygon)
        assert poly.is_valid
        assert not poly.is_empty


def test_self_intersects_shape():
    concave = loads("POLYGON ((-0.5 -0.5, 0.5 -0.5, 0.5 0.5, -0.5 0.5, -0.5 -0.5))")
    self_intersects_poly = loads('POLYGON ((15.433300331563714 75.98453543610287, -21.316699671554492 75.98453543610287, -21.316699671554492 32.11355552794862, 15.433300331563714 32.11355552794862, 15.433300331563714 75.98453543610287), (-7.116699679780595 34.41557410160965, -7.566699668335332 34.415118226212826, -7.566699672151572 34.51511822621296, -7.66669966833615 34.515118222398314, -7.66669966833615 35.91511822239829, -7.966699668235378 35.91511822239829, -7.966699668235378 35.866938243502894, -12.266699671554491 35.866938243502894, -12.26669967155449 39.61511922239822, -8.816699668236199 39.61511922239822, -8.816699668236197 39.61511822229818, -8.816699668229912 39.61198709211102, -8.816699664422686 37.71511822631328, -7.966699668235378 37.715118226213235, -7.966699668235378 35.96511819309111, -0.6166996449543003 35.96511822112677, -0.6166996683364232 42.095118255202614, -4.516699666734075 42.09511824032655, -4.566699666734185 42.09511824013583, -4.566699668336241 42.515118226212735, -6.16669966833615 42.515118226212735, -6.16669966833615 42.51511823021785, -1.036699668336496 42.5151182497857, 1.5333003316636677 42.51511821348163, 1.5333003316636677 42.21511822239859, 2.4333003316637587 42.21511822621267, 2.4333003316637587 41.71511822621278, 2.7333003354783614 41.71511822239847, 2.7333003354783614 42.51511822239854, 1.5333003317638578 42.51511822239854, 1.5524014567792215 44.21511822239859, 1.8833003316635768 44.21511822239859, 1.8833003316635768 47.265118226212735, 0.6333003316635768 47.265118226212735, 0.6333003316635768 47.96511823002754, 0.8333003316638496 47.96511823002754, 0.9333003316637587 47.96511822621278, 0.9333003316637587 49.375118226212635, 1.3333003316638496 49.375118226212635, 1.3333003354782704 49.6751182262127, 0.9333003354781795 49.67511822239817, 0.9333003354781795 50.17511822239851, 0.6333003316635768 50.17511822239851, 0.6333003316635768 51.8251182223986, 0.6333003354784523 51.8251182223986, 0.6333003354784523 51.4251182262127, 0.9333003316637587 51.4251182262127, 0.9333003316637587 52.02511822621284, 0.6333003354784523 52.02511822239819, 0.6333003291206296 52.02511822239819, 0.0333003316636678 53.4251182262127, -6.266699668336514 53.425118146094405, -6.82669966726822 50.625118226212635, -7.066699668336241 50.625118226212635, -7.066699668336241 49.67511823002758, -7.566699668335332 49.6751182262127, -7.566699668335332 49.375118222398214, -7.16669966833615 49.375118222398214, -7.16669966833615 48.56511822621269, -7.516699668336514 48.56511822239838, -7.516699668336514 48.475118222498395, -7.51669966832651 48.47511822249783, -7.51669966831696 48.47511822249635, -7.51669966830741 48.475118222494075, -7.516699668298315 48.47511822249078, -7.51669966828922 48.47511822248657, -7.516699668281035 48.475118222481456, -7.5166996682728495 48.47511822247566, -7.516699668265574 48.47511822246895, -7.516699668259207 48.47511822246179, -7.516699668252841 48.47511822245383, -7.516699668248293 48.47511822244553, -7.5166996682442 48.47511822243666, -7.5166996682405625 48.47511822242734, -7.516699668238289 48.475118222417905, -7.5166996682369245 48.47511822240813, -7.516699668236015 48.47511822239835, -7.516699662693554 45.965118230027656, -7.216699665131873 45.96511822903247, -7.2166996721516625 42.515118226212735, -7.516699655075172 42.51511822506848, -7.516699655075627 42.5151182250587, -7.516699655076991 42.51511822504892, -7.516699655079265 42.51511822503949, -7.516699655083357 42.515118225030164, -7.51669965508745 42.5151182250213, -7.516699655091998 42.515118225012884, -7.516699655097909 42.51511822500504, -7.5166996551047305 42.515118224997764, -7.516699655112006 42.51511822499117, -7.516699655119737 42.51511822498537, -7.516699655128377 42.51511822498014, -7.5166996551370175 42.51511822497605, -7.516699655146567 42.51511822497275, -7.516699655155662 42.515118224970365, -7.516699655165667 42.51511822496889, -7.516699655175216 42.51511822496843, -8.216699664521457 42.51511822229861, -8.216699664521457 42.09511822621336, -8.216699673882008 42.09511822621336, -8.216699672447866 41.71511722621278, -12.26669967155449 41.71511722621278, -12.266699671554488 48.3651177224984, -20.31669967155449 48.3651177224984, -20.31669967155449 48.475118222498395, -20.31669967155449 48.47511822406714, -19.866699668336423 48.47511822621266, -19.866699668336423 48.775118222398305, -20.31669967155449 48.775118225831285, -20.316699671554485 50.321211912238844, -20.316699671554485 54.62511822277986, -19.866699668336423 54.625118226212635, -19.866699668336423 54.9251182262127, -20.316699671554485 54.9251182262127, -20.316699671554485 56.65180071608441, -20.316699671554492 74.98453543610287, -20.31669967 74.98453543610287, -20.316699670000002 64.38453544000001, -16.51669967 64.38453544000001, -12.71669967 64.38453544000001, -12.716699669999997 74.98453543586469, -20.31660796631648 74.98453543610287, 12.322908550910451 74.98453543507995, 12.322908550910451 56.62511727379495, 12.033300335478543 56.62511638524336, 12.033300335478543 56.3251182223986, 12.33330032784852 56.32511822621291, 12.33330033166385 53.72511822239835, 10.633300331663577 53.72511822239835, 10.633300331663577 53.4251182262127, 12.633300331663577 53.4251182262127, 12.633300331663577 54.92511823272412, 14.433300331563714 54.925118236570256, 14.433300331563714 54.925118230027465, 13.633300331663577 54.9251182262127, 13.633300331663577 54.625118226212635, 13.633300335479362 54.62511822239844, 14.033300331663668 54.62511822239844, 14.033300331663668 54.52511822239819, 14.133300335480726 54.52511822239819, 14.133300331663577 53.125118226212635, 14.433300322980358 53.12511822239833, 14.433300331536497 54.91941059236373, 14.433300331562224 54.924805826901725, 14.433300310344194 50.475118222398464, 14.133300331663577 50.475118222398464, 14.133300331663577 48.87511822621275, 14.033300331663668 48.87511822239844, 14.033300335479453 48.775118222398305, 13.633300331663577 48.775118226212726, 13.633300327848701 48.47511823002765, 14.413774309086632 48.47511822630579, 12.322908550910451 48.47511822556563, 12.322908550910451 35.966938243502895, 3.7933003353772214 35.966938243502895, 3.7933003353772214 35.866938243502894, 3.233300342760501 35.866938243502894, 3.2333003558801465 33.1151182263128, 3.233300331663486 33.11511822630284, 3.233300331663486 34.91511822621271, 2.933300335480453 34.91511822239852, 2.9333003316637587 33.5151182223982, 2.8333003316638496 33.515118226212735, 2.8333003316638496 33.415118230027474, 2.4333003316637587 33.41511822621271, 2.4333003316637587 33.11511822239845, 3.2333001127330094 33.11511822621276, -0.5646690056996704 33.11355552794862, -0.5666968798348097 34.11218805654116, -0.5646721789867115 33.115118222437104, -0.1666996721514806 33.11511823002752, -0.1666996721514806 33.5151182300275, -0.2666996683365142 33.5151182223982, -0.2666996645207291 34.56511822239827, -0.2666996721513897 35.915118230027474, -0.5666996683362413 35.91511822239829, -0.5666996683362413 34.415118226212826, -1.4166996683361504 34.415118226212826, -1.4166996683361504 34.11511822621276, -0.5666996683362413 34.11511822621276, -0.5666996683362413 34.11355557754416, -0.5666996568925242 34.11355557753973, -0.5666996568829745 34.11355557753927, -0.5666996568729701 34.11355557753791, -0.5666996568638751 34.11355557753541, -0.5666996568543254 34.11355557753211, -0.5666996568456852 34.11355557752802, -0.5666996568374998 34.113555577523016, -0.5666996568293143 34.113555577517104, -0.5666996568220384 34.11355557751051, -0.5666996568152172 34.113555577503234, -0.5666996568097602 34.11355557749539, -0.566699656804758 34.11355557748698, -0.5666996568006653 34.11355557747811, -0.566699656797482 34.1135555774689, -0.5666996567942988 34.11355557745935, -0.5666996567929345 34.11355557744969, -0.5666996567924798 34.11355557743991, -0.566699656791534 34.113555576974164, -4.561775067668981 34.11511818423254, -7.966698187281425 34.11511822700712, -7.116699679780595 34.115574101609695, -7.116699679780595 34.41557410160965), (-7.2166996721516625 42.21511822621267, -7.2166996721516625 42.515118226212735, -6.466699664521457 42.51511822907353, -6.466699664521457 42.21511822239859, -4.866699668336423 42.21511822239859, -4.866699667682289 42.09511823899152, -7.916699665436499 42.09511822735767, -7.91669966452082 42.21511822239859, -7.216699668336332 42.21511822621267, -7.2166996721516625 42.21511822621267), (0.9333003316637587 46.96511822621267, 1.5833003354805442 46.96511822239859, 0.6333003316635768 46.96511818615443, 0.6333003316635768 46.96511822621267, 0.9333003316637587 46.96511822621267), (1.555772243588256 44.51511822610254, 1.5833003354805442 46.96511822239859, 1.5833003316638496 44.515118226213076, 1.555772243588256 44.51511822610254), (-7.216699664521457 48.26511822621285, -6.86669969187642 48.265118222398314, -7.216699664521457 48.265118222398314, -7.216699664521457 48.26511822621285))')
    assert self_intersects_poly.is_valid
    assert self_intersects_poly.is_simple
    space = self_intersects_poly.envelope
    res = MinkowskiInsertion(concave).of(space=space, obstacle=self_intersects_poly)
    assert len(res) == 3
    for poly in res:
        assert isinstance(poly, Polygon)
        assert poly.is_valid
        assert not poly.is_empty
